{"version":3,"file":"static/js/209.10390089.chunk.js","mappings":"8HAEMA,EAAY,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAC1B,OACI,gBAAKA,UAAWA,EAAhB,SAA4BD,GAEnC,EAEDD,EAAUG,UAAY,CAClBF,SAAUG,EAAAA,KAAAA,WACVF,UAAWG,EAAAA,QAGf,K,6ICZA,GAAgB,KAAO,oBAAoB,eAAiB,8BAA8B,WAAa,0BAA0B,UAAY,yBAAyB,aAAe,4BAA4B,cAAgB,6BAA6B,oBAAsB,mCAAmC,iBAAmB,gCAAgC,YAAc,4B,0ICmLxX,EAhKkB,WAChB,IAAMC,GAAcC,EAAAA,EAAAA,QAAO,MACrBC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BC,GAAkBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC9BC,GAAWC,EAAAA,EAAAA,MACTC,GAAiBC,EAAAA,EAAAA,KAAjBD,aACFE,GAAMC,EAAAA,EAAAA,MAGZ,GAAgCC,EAAAA,EAAAA,UAAS,CACvCC,MAAO,GACPC,SAAU,KAFZ,eAAOC,EAAP,KAAiBC,EAAjB,KAKA,GAAwCJ,EAAAA,EAAAA,UAAS,IAAjD,eAAOK,EAAP,KAAqBC,EAArB,KAGMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAId,OAHAP,GAAY,kBAAKD,GAAN,cAAiBO,EAAOC,KAIjCD,GAEA,IAAK,QACHhB,GAASkB,EAAAA,EAAAA,IAAc,CAAEC,WAAYF,KACrC,MACF,IAAK,WACHjB,GAASoB,EAAAA,EAAAA,IAAiB,CAAED,WAAYF,KAK7C,EAlCqB,wCAqCtB,4GAEYV,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SACTa,EAAW,CAAEd,MAAOA,EAAMe,cAAed,SAAAA,GAHnD,SAIoCR,GAASuB,EAAAA,EAAAA,IAAMF,IAJnD,UAIUG,EAJV,QAKQD,EAAAA,GAAAA,UAAAA,MAAsBC,GAL9B,iCAM4CxB,GACpCyB,EAAAA,EAAAA,IAAYvB,IAPpB,OAMYwB,EANZ,OASUD,EAAAA,GAAAA,SAAAA,MAA2BC,IAC7B1B,GAAS2B,EAAAA,EAAAA,oBACTvB,EAAI,gBAEJA,EAAI,UAbZ,gEAiBU,IAAIwB,MAAM,qBAAuB,KAAIC,SAjB/C,2DArCsB,sBAgEtB,OACE,UAACC,EAAA,EAAD,CAAKzC,UAAW0C,EAAAA,eAAhB,WACE,eAAI1C,UAAW0C,EAAAA,WAAf,SAAiC,YACjC,SAACC,EAAA,GAAD,CAAM3C,UAAW0C,EAAAA,UAAjB,UAGE,SAACE,EAAA,EAAD,CAAaC,QAAQ,WAArB,UACE,kBAAMC,SAZd,SAAsBrB,GACpBA,EAAEsB,iBA5DkB,mCA6DpBC,EACD,EASqChD,UAAW0C,EAAAA,KAAzC,UACG,KAED,SAACO,EAAA,EAAD,CACEC,aAAa,QACblD,UAAW0C,EAAAA,YACXS,gBACmB,UAAjB7B,GAA6BhB,EAEzB,CAAEoC,MAAO,CAAEU,MAAO,YADlB,CAAEV,MAAO,CAAEU,MAAO,QAGxBC,WAAY,CACVC,WAAY,SAAAC,GAEE,UADIA,EAARC,KAENpD,EAAYqD,QAAQC,OAEvB,GAEHb,QAAQ,WACRc,MAAM,QACNC,KAAK,QACLjC,KAAK,QACLkC,WAAS,EACTC,OAAO,SACPC,UAAQ,EACRC,MAAwB,UAAjB1C,IAA6BhB,EAEpC2D,WACG7C,EAASF,MAENZ,GAAgBc,EAASF,MAAMgD,OAAS,GAC1C,iBAAMlE,UAAW0C,EAAAA,oBAAjB,SAA4C,iBAE5C,iBAAM1C,UAAW0C,EAAAA,cAAjB,SAAsC,eAJtC,WAOJd,MAAOR,EAASF,MAChBiD,SAAU3C,EACV4C,QAAS,kBAAM7C,EAAgB,QAAtB,KAEX,SAAC0B,EAAA,EAAD,CACEC,aAAa,mBACblD,UAAW0C,EAAAA,eACXS,gBACmB,aAAjB7B,GAAgCb,EAE5B,CAAEiC,MAAO,CAAEU,MAAO,YADlB,CAAEV,MAAO,CAAEU,MAAO,QAGxBiB,SAAUjE,EACVyC,QAAQ,WACRc,MAAM,WACNC,KAAK,WACLjC,KAAK,WACLkC,WAAS,EACTC,OAAO,SACPC,UAAQ,EACRC,MAAwB,aAAjB1C,IAAgCb,EAEvCwD,WACG7C,EAASD,SAENV,GACF,iBAAMT,UAAW0C,EAAAA,oBAAjB,SAA4C,iBAE5C,iBAAM1C,UAAW0C,EAAAA,cAAjB,SAAsC,eAJtC,WAOJd,MAAOR,EAASD,SAChBgD,SAAU3C,EACV4C,QAAS,kBAAM7C,EAAgB,WAAtB,KAEX,SAACkB,EAAA,EAAD,CAAKzC,UAAW0C,EAAAA,iBAAhB,UACE,SAAC4B,EAAA,EAAD,CACElB,MAAM,SACNQ,KAAK,SACLW,UAAWjE,IAAiBG,EAC5BT,UAAW0C,EAAAA,aAJb,SAKC,sBASd,E,UCjKD,MAbA,WACE,OAEE,gBAAK1C,UAAU,4BAAf,UACE,oBAASA,UAAU,aAAnB,UACE,SAACF,EAAA,EAAD,CAAWE,UAAU,aAArB,UACE,SAAC,EAAD,SAKT,C,8ICZKwE,EAAqB,SAACC,GAAD,OAAWA,EAAMC,YAAjB,EAmBdC,IAhB2BC,EAAAA,EAAAA,IACtC,CAACJ,IACD,SAACE,GAAD,OAAkBA,EAAaG,eAAelD,IAA9C,KAGuCiD,EAAAA,EAAAA,IACvC,CAACJ,IACD,SAACE,GAAD,OAAkBA,EAAaG,eAAe3D,KAA9C,KAG0C0D,EAAAA,EAAAA,IAC1C,CAACJ,IACD,SAACE,GAAD,OAAkBA,EAAaG,eAAe1D,QAA9C,KAI+ByD,EAAAA,EAAAA,IAC/B,CAACJ,IACD,SAACE,GAAD,OAAkBA,EAAaI,WAA/B,KAGWtE,GAAqBoE,EAAAA,EAAAA,IAChC,CAACJ,IACD,SAACE,GAAD,OAAkBA,EAAapE,YAA/B,IAGWI,GAAwBkE,EAAAA,EAAAA,IACnC,CAACJ,IACD,SAACE,GAAD,OAAkBA,EAAajE,eAA/B,IAIWsE,GAAoBH,EAAAA,EAAAA,IAC/B,CAACD,EAAmBnE,EAAoBE,IACxC,SAACoE,EAAaxE,EAAcG,GAA5B,OACEqE,GAAexE,GAAgBG,CADjC,G","sources":["components/Container/Container.jsx","webpack://slimmom/./src/components/LoginForm/login.module.css?916a","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","redux/validation/registrationSelectors.js"],"sourcesContent":["import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"login_form__3ru5I\",\"form_container\":\"login_form_container__K4jsj\",\"form_title\":\"login_form_title__Wyom9\",\"form_grid\":\"login_form_grid__1MIvp\",\"login_button\":\"login_login_button__DZPBF\",\"error_message\":\"login_error_message__WE-l0\",\"error_message_valid\":\"login_error_message_valid__NbF4o\",\"button_container\":\"login_button_container__Evbbt\",\"email_input\":\"login_email_input__bl6Jx\"};","import React from 'react';\nimport { useState, useRef } from 'react';\nimport style from '../LoginForm/login.module.css';\nimport { Box, FormControl, TextField, Grid } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from 'redux/auth/authOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectIsEmailValid,\n  selectIsPasswordValid,\n} from '../../redux/validation/registrationSelectors';\nimport {\n  validateEmail,\n  validatePassword,\n} from '../../redux/validation/registrationSlice';\nimport { getUserInfo } from 'redux/user/userOperations';\nimport { useUser } from 'hooks/useUser';\nimport CustomButton from 'components/CustomButton/CustomButton';\nimport { clearCalculator } from 'redux/user/userSlice';\n\nconst LoginForm = () => {\n  const passwordRef = useRef(null);\n  const isEmailValid = useSelector(selectIsEmailValid);\n  const isPasswordValid = useSelector(selectIsPasswordValid);\n  const dispatch = useDispatch();\n  const { calendarDate } = useUser();\n  const nav = useNavigate(); // react router hook\n\n  // form data state\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  // used to set the focused text field\n  const [focusedField, setFocusedField] = useState('');\n\n  // listens to input change\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n    // check if email is valid\n\n    switch (\n      name // dispatches validation reducers from the slice on change\n    ) {\n      case 'email':\n        dispatch(validateEmail({ fieldValue: value }));\n        break;\n      case 'password':\n        dispatch(validatePassword({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n  };\n\n  // handles login\n  async function handleLogin() {\n    try {\n      const { email, password } = formData;\n      const sendData = { email: email.toLowerCase(), password };\n      const loginResultAction = await dispatch(login(sendData));\n      if (login.fulfilled.match(loginResultAction)) {\n        const getUserInfoResultAction = await dispatch(\n          getUserInfo(calendarDate)\n        );\n        if (getUserInfo.rejected.match(getUserInfoResultAction)) {\n          dispatch(clearCalculator());\n          nav('/calculator');\n        } else {\n          nav('/diary');\n        }\n      }\n    } catch (err) {\n      throw new Error('Error logging in: ' + err.message);\n    }\n  }\n\n  // handles form submission\n  function handleSubmit(e) {\n    e.preventDefault();\n    handleLogin(); // calls the login function\n  }\n\n  return (\n    <Box className={style.form_container}>\n      <h2 className={style.form_title}>LOG IN</h2>\n      <Grid className={style.form_grid}>\n        {/* login form */}\n\n        <FormControl variant=\"standard\">\n          <form onSubmit={handleSubmit} className={style.form}>\n            {' '}\n            {/*pass validatioon schema */}\n            <TextField\n              autoComplete=\"email\"\n              className={style.email_input}\n              InputLabelProps={\n                focusedField === 'email' && !isEmailValid\n                  ? { style: { color: 'red' } }\n                  : { style: { color: '#9B9FAA' } }\n              }\n              inputProps={{\n                onKeyPress: event => {\n                  const { key } = event;\n                  if (key === 'Enter') {\n                    passwordRef.current.focus();\n                  }\n                },\n              }}\n              variant=\"standard\"\n              label=\"Email\"\n              type=\"email\"\n              name=\"email\"\n              fullWidth\n              margin=\"normal\"\n              required\n              error={focusedField === 'email' && !isEmailValid}\n              // styles the input field and checks whether email is not valid and when it is valid\n              helperText={\n                !formData.email ? (\n                  'Required'\n                ) : isEmailValid && formData.email.length > 3 ? (\n                  <span className={style.error_message_valid}>Checks out!</span>\n                ) : (\n                  <span className={style.error_message}>Not quite!</span>\n                )\n              }\n              value={formData.email}\n              onChange={handleChange}\n              onFocus={() => setFocusedField('email')}\n            />\n            <TextField\n              autoComplete=\"current-password\"\n              className={style.password_input}\n              InputLabelProps={\n                focusedField === 'password' && !isPasswordValid\n                  ? { style: { color: 'red' } }\n                  : { style: { color: '#9B9FAA' } }\n              }\n              inputRef={passwordRef}\n              variant=\"standard\"\n              label=\"Password\"\n              type=\"password\"\n              name=\"password\"\n              fullWidth\n              margin=\"normal\"\n              required\n              error={focusedField === 'password' && !isPasswordValid}\n              // styles the input field and checks whether password is not valid and when it is valid\n              helperText={\n                !formData.password ? (\n                  'Required'\n                ) : isPasswordValid ? (\n                  <span className={style.error_message_valid}>Checks out!</span>\n                ) : (\n                  <span className={style.error_message}>Not quite!</span>\n                )\n              }\n              value={formData.password}\n              onChange={handleChange}\n              onFocus={() => setFocusedField('password')}\n            />\n            <Box className={style.button_container}>\n              <CustomButton\n                color=\"orange\"\n                type=\"submit\"\n                disabled={!isEmailValid || !isPasswordValid}\n                className={style.login_button}\n              >\n                Log In\n              </CustomButton>\n            </Box>\n          </form>\n        </FormControl>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react'\nimport LoginForm from '../../components/LoginForm/LoginForm'\nimport Container from 'components/Container/Container'\n\nfunction Login() {\n  return (\n    // imported my form here to see it get rendered \n    <div className=\"background mainBackground\">\n      <section className=\"top-bottom\">\n        <Container className=\"left-right\">\n          <LoginForm />\n        </Container>\n      </section>\n    </div>\n  )\n}\n\nexport default Login\n","import { createSelector } from 'reselect';\n\n// Select the registration slice from the Redux store\nconst selectRegistration = (state) => state.registration;\n\n// Select individual validation requirements\nexport const selectNameValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.name\n);\n\nexport const selectEmailValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.email\n);\n\nexport const selectPasswordValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.password\n);\n\n// Select individual field validation states - this works then?\nexport const selectIsNameValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isNameValid \n);\n\nexport const selectIsEmailValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isEmailValid \n);\n\nexport const selectIsPasswordValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isPasswordValid \n);\n\n// Select the overall form validity\nexport const selectFormIsValid = createSelector(\n  [selectIsNameValid, selectIsEmailValid, selectIsPasswordValid],\n  (isNameValid, isEmailValid, isPasswordValid) =>\n    isNameValid && isEmailValid && isPasswordValid\n);"],"names":["Container","children","className","propTopes","node","string","passwordRef","useRef","isEmailValid","useSelector","selectIsEmailValid","isPasswordValid","selectIsPasswordValid","dispatch","useDispatch","calendarDate","useUser","nav","useNavigate","useState","email","password","formData","setFormData","focusedField","setFocusedField","handleChange","e","target","name","value","validateEmail","fieldValue","validatePassword","sendData","toLowerCase","login","loginResultAction","getUserInfo","getUserInfoResultAction","clearCalculator","Error","message","Box","style","Grid","FormControl","variant","onSubmit","preventDefault","handleLogin","TextField","autoComplete","InputLabelProps","color","inputProps","onKeyPress","event","key","current","focus","label","type","fullWidth","margin","required","error","helperText","length","onChange","onFocus","inputRef","CustomButton","disabled","selectRegistration","state","registration","selectIsNameValid","createSelector","validationReqs","isNameValid","selectFormIsValid"],"sourceRoot":""}