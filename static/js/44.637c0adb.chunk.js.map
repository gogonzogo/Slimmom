{"version":3,"file":"static/js/44.637c0adb.chunk.js","mappings":"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","sources":["webpack://slimmom/./src/components/CaloriesCalc/CaloriesCalc.module.css?baa3","components/Modal/PostCalculatorConfirmDialog.jsx","components/CaloriesCalc/CaloriesCalc.jsx","components/Container/Container.jsx","components/Modal/ListWithScroll.jsx","components/Modal/DailyRateModal.jsx","components/Modal/DiaryModal.jsx","components/Modal/Modal.jsx","components/ValidationPopup/ValidationPopup.module.css","components/ValidationPopup/ValidationPopup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"CaloriesCalc_section__WB2nl\",\"positionWrapper\":\"CaloriesCalc_positionWrapper__+O-50\",\"heading\":\"CaloriesCalc_heading__fAzfD\",\"formdiv\":\"CaloriesCalc_formdiv__+a6k+\",\"calcform\":\"CaloriesCalc_calcform__iDf5l\",\"tabs\":\"CaloriesCalc_tabs__MkAfR\"};","import { forwardRef } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport { postCalculator } from 'redux/user/userOperations';\nimport { useDispatch } from 'react-redux';\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function PostCalculatorConfirmDialog({\n  confirmPostCalculator,\n  postCalculatorConfirmed,\n}) {\n  const dispatch = useDispatch();\n\n  const handleSave = (e) => {\n    dispatch(postCalculator(confirmPostCalculator.calculator));\n    postCalculatorConfirmed(e);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={confirmPostCalculator.open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={postCalculatorConfirmed}\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle>{\"Save updated calculator?\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            Would you like to save this update to your calculator data or discard?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={postCalculatorConfirmed}>Discard</Button>\n          <Button onClick={(e) => handleSave(e)}>Save</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport css from './CaloriesCalc.module.css';\nimport { useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Tab, Tabs } from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Modal from 'components/Modal/Modal';\nimport ValidationPopup from '../ValidationPopup/ValidationPopup';\nimport {\n  validateHeightFeet,\n  validateHeightInch,\n  validateCurrentLbs,\n  validateDesiredLbs,\n  validateHeight,\n  validateAge,\n  validateCurrent,\n  validateDesired,\n  validateBlood,\n} from '../../redux/validation/calculateCalsSlice';\nimport { storeCalulator } from '../../redux/user/userSlice';\nimport CustomButton from 'components/CustomButton/CustomButton';\nimport { getDailyRate } from '../../redux/user/userOperations';\nimport { useAuth } from '../../hooks/useAuth';\nimport dayjs from 'dayjs';\nimport { useUser } from 'hooks/useUser';\nimport PostCalculatorConfirmDialog from 'components/Modal/PostCalculatorConfirmDialog';\n\nconst CaloriesCalc = () => {\n  const ageRef = useRef(null);\n  const currentRef = useRef(null);\n  const desiredRef = useRef(null);\n  const heightInRef = useRef(null);\n  const ageUSRef = useRef(null);\n  const currentLbsRef = useRef(null);\n  const desiredLbsRef = useRef(null);\n  const [buttonText, setButtonText] = useState('Submit');\n  const { calculator } = useUser();\n  const [confirmPostCalculator, setConfirmPostCalculator] = useState({\n    calculator: null,\n    open: false,\n  });\n\n  const { loggedIn } = useAuth();\n  const today = dayjs().format('MM-DD-YYYY');\n  const dispatch = useDispatch();\n  const validHeight = useSelector(state => state.calculate.isHeightValid);\n  const validAge = useSelector(state => state.calculate.isAgeValid);\n  const validcurrent = useSelector(state => state.calculate.isCurrentValid);\n  const validDesired = useSelector(state => state.calculate.isDesiredValid);\n  const validBlood = useSelector(state => state.calculate.isBloodValid);\n  const isFormValid =\n    validHeight && validAge && validcurrent && validDesired && validBlood\n      ? true\n      : false;\n\n  useEffect(() => {\n    if (loggedIn) {\n      setButtonText('Update Calculator');\n    } else {\n      setButtonText('Start losing weight');\n    }\n  }, [loggedIn]);\n\n  const validHeightFeet = useSelector(\n    state => state.calculate.isHeightFeetValid\n  );\n  const validHeightInch = useSelector(\n    state => state.calculate.isHeightInchValid\n  );\n  const validcurrentLbs = useSelector(\n    state => state.calculate.isCurrentLbsValid\n  );\n  const validDesiredLbs = useSelector(\n    state => state.calculate.isDesiredLbsValid\n  );\n  const isStandardFormValid =\n    validHeightFeet &&\n      validHeightInch &&\n      validAge &&\n      validcurrentLbs &&\n      validDesiredLbs &&\n      validBlood\n      ? true\n      : false;\n\n  const [validationPopups, setValidationPopups] = useState({\n    weight: false,\n    age: false,\n    currentWeight: false,\n    desiredWeight: false,\n    bloodType: false,\n  });\n\n  const resetForm = () => {\n    setFormData({\n      height: '',\n      age: '',\n      currentWeight: '',\n      desiredWeight: '',\n      bloodType: '',\n      heightFeet: '',\n      heightInch: '',\n      currentWeightLbs: '',\n      desiredWeightLbs: '',\n      unitOfMeasure: 'M',\n    });\n    dispatch(validateHeight({ fieldValue: '' }));\n    dispatch(validateHeightFeet({ fieldValue: '' }));\n    dispatch(validateHeightInch({ fieldValue: '' }));\n    dispatch(validateAge({ fieldValue: '' }));\n    dispatch(validateCurrent({ fieldValue: '' }));\n    dispatch(validateCurrentLbs({ fieldValue: '' }));\n    dispatch(validateDesired({ fieldValue: '' }));\n    dispatch(validateDesiredLbs({ fieldValue: '' }));\n    dispatch(validateBlood({ fieldValue: '' }));\n  };\n  const [focusedField, setFocusedField] = useState(null);\n\n  const toggleValidationPopup = (fieldName, visible) => {\n    setValidationPopups({ ...validationPopups, [fieldName]: visible });\n  };\n\n  const [modalState, setModalState] = useState({\n    open: false,\n    dailyRate: null,\n    foodNotToEat: [],\n    source: 'calculator',\n  }); //modal state and setters\n\n  const handleModalOpen = passinfo => {\n    setModalState(prev => {\n      return {\n        ...prev,\n        open: true,\n        dailyRate: passinfo.dailyRate,\n        foodNotToEat: passinfo.notAllowedFood,\n      };\n    });\n  };\n  const handleModalClose = () => {\n    setModalState(prev => {\n      return {\n        ...prev,\n        open: false,\n      };\n    });\n    setTimeout(() => {\n      // fixing effect, when during closing modal you see 0 kcal recommended daily calorie intake\n      setModalState({\n        open: false,\n        dailyRate: null,\n        foodNotToEat: [],\n        source: 'calculator',\n      });\n    }, 250);\n  };\n\n  const [formData, setFormData] = useState({\n    height: '',\n    age: '',\n    currentWeight: '',\n    desiredWeight: '',\n    bloodType: '',\n    heightFeet: '',\n    heightInch: '',\n    currentWeightLbs: '',\n    desiredWeightLbs: '',\n    unitOfMeasure: 'M',\n  });\n\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\n\n  const handleTabChange = async (e, tabIndex) => {\n    setCurrentTabIndex(tabIndex);\n    await setFormData(formData => {\n      return {\n        ...formData,\n        unitOfMeasure: tabIndex === 0 ? 'M' : 'S',\n      };\n    });\n  };\n\n  const changeHandler = e => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    switch (name) {\n      case 'height':\n        dispatch(validateHeight({ fieldValue: value }));\n        break;\n      case 'heightFeet':\n        dispatch(validateHeightFeet({ fieldValue: value }));\n        break;\n      case 'heightInch':\n        dispatch(validateHeightInch({ fieldValue: value }));\n        break;\n      case 'age':\n        dispatch(validateAge({ fieldValue: value }));\n        break;\n      case 'currentWeight':\n        dispatch(validateCurrent({ fieldValue: value }));\n        break;\n      case 'currentWeightLbs':\n        dispatch(validateCurrentLbs({ fieldValue: value }));\n        break;\n      case 'desiredWeight':\n        dispatch(validateDesired({ fieldValue: value }));\n        break;\n      case 'desiredWeightLbs':\n        dispatch(validateDesiredLbs({ fieldValue: value }));\n        break;\n      case 'bloodType':\n        dispatch(validateBlood({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n    setFocusedField(name);\n    toggleValidationPopup(name, true);\n  };\n  const validationReqs = useSelector(state => state.calculate.validationReqs);\n  const renderValidationPopup = () => {\n    return (\n      <div>\n        <ValidationPopup\n          validationData={validationReqs[focusedField]}\n          visible={focusedField}\n        />\n      </div>\n    );\n  };\n\n  const postCalculatorConfirmed = (e) => {\n    const target = e.target.firstChild.data;;\n    setConfirmPostCalculator(prev => {\n      return {\n        ...prev,\n        open: false,\n      };\n    });\n    if (target !== 'Discard') {\n      resetForm();\n    };\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    try {\n      const {\n        height,\n        age,\n        currentWeight,\n        desiredWeight,\n        bloodType,\n        heightFeet,\n        heightInch,\n        currentWeightLbs,\n        desiredWeightLbs,\n        unitOfMeasure,\n      } = formData;\n      const convertMeasurements = {\n        currentWeight:\n          unitOfMeasure === 'M' ? currentWeight : currentWeightLbs * 0.454,\n        height:\n          unitOfMeasure === 'M'\n            ? height\n            : (heightFeet * 12 + heightInch * 1) * 2.54,\n        age,\n        desiredWeight:\n          unitOfMeasure === 'M' ? desiredWeight : desiredWeightLbs * 0.454,\n        bloodType,\n      };\n      const response = await dispatch(getDailyRate(convertMeasurements));\n      const passinfo = response.payload.data;\n      const calculatorInfo = {\n        height,\n        age,\n        bloodType,\n        currentWeight,\n        desiredWeight,\n        heightFeet,\n        heightInch,\n        currentWeightLbs,\n        desiredWeightLbs,\n        dailyRate: passinfo.dailyRate,\n        unitOfMeasure,\n        date: today,\n        startDate: calculator.startDate || today,\n        originalWeight:\n          calculator.originalWeight || currentWeight || currentWeightLbs,\n      };\n      if (!loggedIn) {\n        dispatch(storeCalulator(calculatorInfo));\n        handleModalOpen(passinfo);\n      } else {\n        setConfirmPostCalculator(() => {\n          return {\n            calculator: calculatorInfo,\n            open: true,\n          };\n        });\n      }\n    } catch (err) {\n      throw new Error('Error submitting calculator: ' + err.message);\n    }\n  };\n\n  return (\n    <>\n      <div className={css.positionWrapper}>\n        <div className={css.section}>\n          <div className={css.calcWrapper}>\n            {!loggedIn ? <><h1 className={css.heading}>Calculate your daily calorie</h1>\n              <h1 className={css.heading}>intake right now</h1></>\n              : <><h1 className={css.heading}>Input your stats, calculate</h1>\n                <h1 className={css.heading}>your caloric intake</h1></>\n            }\n\n            <div className={css.tabs}>\n              <Tabs\n                orientation=\"horizontal\"\n                value={currentTabIndex}\n                onChange={handleTabChange}\n                indicatorColor=\"transparent\"\n                sx={{\n                  '& button': {\n                    marginTop: '25px',\n                    paddingTop: '5px',\n                    width: '100px',\n                    padding: '1rem',\n                    margin: '2px',\n                    //  height: '20px',\n                    borderRadius: '30px',\n                    fontFamily: 'Verdana',\n                    fontSize: '9px',\n                    fontWeight: 700,\n                    textTransform: 'capitalize',\n                    //  backgroundColor: '#fc842d',\n                    border: 'solid #fc842d',\n                  },\n                  '& button:focus': {\n                    //  backgroundColor: '#ffffff',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                  '& button:hover': {\n                    //  backgroundColor: '#ffffff',\n                    //  color: '#fc842d',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                }}\n              >\n                <Tab label=\"Metric\" />\n                <Tab label=\"Standard US\" />\n              </Tabs>\n            </div>\n\n            {/* TAB 1 Contents */}\n            {currentTabIndex === 0 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      '& .MuiOutlinedInput-root.Mui-focused': {\n                        '& > fieldset': {\n                          borderColor: 'orange',\n                        },\n                      },\n\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'height' && !validHeight\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          ageRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Height *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.height}\n                    name=\"height\"\n                    onFocus={() => setFocusedField('height')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'height' && !validHeight}\n                  />\n                  {focusedField === 'height' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'age' && !validAge\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={ageRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          currentRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'age' && !validAge}\n                  />\n                  {focusedField === 'age' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'currentWeight' && !validcurrent\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={currentRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          desiredRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Current Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeight}\n                    name=\"currentWeight\"\n                    onFocus={() => setFocusedField('currentWeight')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'currentWeight' && !validcurrent}\n                  />\n                  {focusedField === 'currentWeight' && renderValidationPopup()}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'desiredWeight' && !validDesired\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={desiredRef}\n                    label=\"Desired Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeight}\n                    name=\"desiredWeight\"\n                    onFocus={() => setFocusedField('desiredWeight')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'desiredWeight' && !validDesired}\n                  />\n                  {focusedField === 'desiredWeight' && renderValidationPopup()}\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"1\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"2\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"3\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"4\"\n                    />\n                  </RadioGroup>\n                  {focusedField === 'bloodType' && renderValidationPopup()}\n                </div>\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isFormValid}\n                >\n                  {buttonText}\n                </CustomButton>\n              </form>\n            )}\n            {/*  Standard US Contents */}\n            {currentTabIndex === 1 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'heightFeet' && !validHeightFeet\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          heightInRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Height Feet *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightFeet}\n                    name=\"heightFeet\"\n                    onFocus={() => setFocusedField('heightFeet')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'heightFeet' && !validHeightFeet}\n                  />\n                  {focusedField === 'heightFeet' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'heightInch' && !validHeightInch\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={heightInRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          ageUSRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Height Inch *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightInch}\n                    name=\"heightInch\"\n                    onFocus={() => setFocusedField('heightInch')}\n                    onBlur={() => setFocusedField(null)}\n                  // error={focusedField === 'heightInch' && !validHeightInch}\n                  />\n                  {focusedField === 'heightInch' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'age' && !validAge\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={ageUSRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          currentLbsRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'age' && !validAge}\n                  />\n                  {focusedField === 'age' && renderValidationPopup()}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'currentWeightLbs' && !validcurrentLbs\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={currentLbsRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          desiredLbsRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Current Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeightLbs}\n                    name=\"currentWeightLbs\"\n                    onFocus={() => setFocusedField('currentWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'currentWeightLbs' && !validcurrentLbs}\n                  />\n                  {focusedField === 'currentWeightLbs' &&\n                    renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'desiredWeightLbs' && !validDesiredLbs\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={desiredLbsRef}\n                    type=\"tel\"\n                    label=\"Desired Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeightLbs}\n                    name=\"desiredWeightLbs\"\n                    onFocus={() => setFocusedField('desiredWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                  //  error={focusedField === 'desiredWeightLbs' && !validDesiredLbs}\n                  />\n                  {focusedField === 'desiredWeightLbs' &&\n                    renderValidationPopup()}\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"A\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"B\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"AB\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"O\"\n                    />\n                  </RadioGroup>\n                </div>\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isStandardFormValid}\n                >\n                  {buttonText}\n                </CustomButton>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n      <Modal handleModalClose={handleModalClose} modalState={modalState} />\n      <PostCalculatorConfirmDialog\n        confirmPostCalculator={confirmPostCalculator}\n        postCalculatorConfirmed={postCalculatorConfirmed}\n      />\n    </>\n  );\n};\n\nexport default CaloriesCalc;\n","import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","import s from './modal.module.css';\nconst ListWithScroll = props => {\n  return (\n    <ol style={props.style}>\n      {props.array.map(listItem => (\n        <li className={s.notEatItem} key={listItem._id}>\n          {listItem.title}\n        </li>\n      ))}\n    </ol>\n  );\n};\n\nexport default ListWithScroll;\n","import { Button } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport ListWithScroll from './ListWithScroll';\nimport s from './modal.module.css';\n\nconst DailyRateModal = ({ handleModalClose, modalState }) => {\n  return (\n      <>\n        <div className={s.backButtonMobbile}>\n          <span className={s.back} onClick={handleModalClose}>\n            ⏎\n          </span>\n        </div>\n        <div className={s.modalBox}>\n          <span className={s.closeButton} onClick={handleModalClose}>\n            ✕\n          </span>\n          <p className={s.modalTitle}>\n            Your recommended daily\n            <br /> calorie intake is\n          </p>\n          <b className={s.dailyRate}>\n            <span className={s.totalCaloriesNumber}>\n              {Math.round(modalState.dailyRate)}{' '}\n            </span>\n            kcal\n          </b>\n          <div className={s.notEat}>\n            <hr className={s.hr} />\n            <b className={s.text2}>Foods you should not eat</b>\n            <ListWithScroll array={modalState.foodNotToEat.slice(0)} />\n            <Link to=\"register\" className={s.buttonWrapper}>\n              <Button className={s.button} variant=\"contained\">\n                Start losing weight\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </>\n  );\n};\nexport default DailyRateModal;\n","import { Button } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport s from './modal.module.css';\n\nfunction DiaryModal() {\n  return (\n    <>\n      <div className={s.modalBox}>\n        <p className={s.modalTitle}>\n          Caloric daily rate required\n          <br /> to use diary!\n        </p>\n        <Link to=\"/calculator\" className={s.buttonWrapper}>\n          <Button className={s.button} variant=\"contained\">\n            Click Here\n          </Button>\n        </Link>\n      </div>\n    </>\n  );\n}\n\nexport default DiaryModal;\n","import {\n  Box,\n  Backdrop,\n  Fade,\n  Modal as MaterialModal,\n  useMediaQuery,\n} from '@mui/material';\n\nimport DailyRateModal from './DailyRateModal';\nimport DiaryModal from './DiaryModal';\n\nconst Modal = ({ handleModalClose, modalState }) => {\n  const isMobile = useMediaQuery('(max-width: 480px)');\n\n  return (\n    <MaterialModal\n      style={{ top: isMobile && 83 }}\n      open={modalState.open}\n      onClose={handleModalClose}\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n          sx: { top: isMobile && 83, backgroundColor: '#2121211f' },\n        },\n      }}\n      disableScrollLock={isMobile ? true : false}\n    >\n      <Fade in={modalState.open}>\n        <Box>\n          {modalState.source === 'calculator' ? (\n            <DailyRateModal\n              handleModalClose={handleModalClose}\n              modalState={modalState}\n            />\n          ) : (\n            <DiaryModal handleModalClose={handleModalClose} />\n          )}\n        </Box>\n      </Fade>\n    </MaterialModal>\n  );\n};\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport { Paper, List, ListItem, ListItemText } from '@mui/material';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport css from './ValidationPopup.module.css';\n\nconst ValidationPopup = ({ validationData, visible }) => {\n  return (\n    <Paper elevation={8} className={css.validationPopup}>\n      <List className={css.validationPopupList} sx={{ width: '100%', maxWidth: 360 }}>\n        {visible && validationData\n          ? validationData.map((item, index) => {\n              const reqKey = Object.keys(item)[0];\n              const { id, message, met } = item[reqKey];\n              const IconComponent = met ? CheckCircleOutlineIcon : ErrorOutlineIcon;\n              const iconColor = met ? 'green' : 'red';\n              return (\n                <ListItem className={css.validationPopupItem} key={id} disableGutters>\n                  <IconComponent className={css.validationPopupIcon} style={{ color: iconColor }} />\n                  <ListItemText disableTypography primary={message} sx={{ fontSize: '12px' }} />\n                </ListItem>\n              );\n            })\n          : null}\n      </List>\n    </Paper>\n  );\n};\n\nexport default ValidationPopup;"],"names":["Transition","forwardRef","props","ref","Slide","direction","PostCalculatorConfirmDialog","confirmPostCalculator","postCalculatorConfirmed","dispatch","useDispatch","Dialog","open","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","id","DialogActions","Button","onClick","e","postCalculator","calculator","handleSave","ageRef","useRef","currentRef","desiredRef","heightInRef","ageUSRef","currentLbsRef","desiredLbsRef","useState","buttonText","setButtonText","useUser","setConfirmPostCalculator","loggedIn","useAuth","today","dayjs","format","validHeight","useSelector","state","calculate","isHeightValid","validAge","isAgeValid","validcurrent","isCurrentValid","validDesired","isDesiredValid","validBlood","isBloodValid","isFormValid","useEffect","validHeightFeet","isHeightFeetValid","validHeightInch","isHeightInchValid","validcurrentLbs","isCurrentLbsValid","validDesiredLbs","isDesiredLbsValid","isStandardFormValid","weight","age","currentWeight","desiredWeight","bloodType","validationPopups","setValidationPopups","focusedField","setFocusedField","dailyRate","foodNotToEat","source","modalState","setModalState","handleModalOpen","passinfo","prev","notAllowedFood","height","heightFeet","heightInch","currentWeightLbs","desiredWeightLbs","unitOfMeasure","formData","setFormData","currentTabIndex","setCurrentTabIndex","handleTabChange","tabIndex","changeHandler","fieldName","visible","target","name","value","validateHeight","fieldValue","validateHeightFeet","validateHeightInch","validateAge","validateCurrent","validateCurrentLbs","validateDesired","validateDesiredLbs","validateBlood","validationReqs","renderValidationPopup","ValidationPopup","validationData","submitHandler","preventDefault","convertMeasurements","getDailyRate","response","payload","data","calculatorInfo","date","startDate","originalWeight","storeCalulator","Error","message","className","css","Tabs","orientation","onChange","indicatorColor","sx","marginTop","paddingTop","width","padding","margin","borderRadius","fontFamily","fontSize","fontWeight","textTransform","border","boxShadow","Tab","label","onSubmit","TextField","borderColor","lineHeight","letterSpacing","textAlign","paddingRight","InputLabelProps","style","color","type","inputProps","onKeyPress","event","key","current","focus","variant","onFocus","onBlur","inputRef","FormLabel","RadioGroup","flexDirection","FormControlLabel","control","Radio","CustomButton","size","disabled","Modal","handleModalClose","setTimeout","firstChild","Container","children","propTopes","node","string","array","map","listItem","s","title","_id","Math","round","ListWithScroll","slice","to","isMobile","useMediaQuery","top","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","backgroundColor","disableScrollLock","Fade","in","Box","Paper","elevation","List","maxWidth","item","index","Object","keys","met","IconComponent","CheckCircleOutlineIcon","ErrorOutlineIcon","iconColor","ListItem","disableGutters","ListItemText","disableTypography","primary"],"sourceRoot":""}